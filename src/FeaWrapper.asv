classdef FeaWrapper
    %FeaWrapper Perform displacement computations using FEA
    %   Detailed explanation goes here
    
    properties
        geoPath             % path to geometry
        fixedFaces          % faces of the object that are fixed
        facesWithPressure   % faces to which pressure will be applied to
        mesh                % Discretized geometry
        model               % PDE
        Rs                  % Solved problem
    end
    
    methods
        % Constructor
        function obj = FeaWrapper(geoPath, fixedFaces, facesWithPressure)
            obj.geoPath = geoPath;
            obj.fixedFaces = fixedFaces;
            obj.facesWithPressure = facesWithPressure;
            obj.model = createpde("structural", "static-solid");

            importGeometry(obj.model, obj.geoPath);
            obj.mesh = generateMesh(obj.model, 'Hmax', 1);
        end

        % Visualize Geometry
        function visGeo(obj, tit)
            figure;
            pdegplot(obj.model,'FaceLabels','off');
            view(30,30);
            title(tit);
        end

        % Set boundary conditions
        %   E   -> Youngs modulus in Newtons
        %   nu  -> Poissons ratio
        %   weight -> Force on the object
        function obj = solve(obj, E, nu, weight, massDensity)
            % Material properties (steel)
            structuralProperties(obj.model, ...
                'YoungsModulus', E, ...
                'PoissonsRatio', nu, ...
                'MassDensity', massDensity);
            
            % Fix ends of the bridge..
            structuralBC(obj.model, ... 
                 'Face', obj.fixedFaces, ...
                 'Constraint', 'fixed');
            
            % Weight on the structure + gravity
             structuralBoundaryLoad(obj.model, ...
                 'Face', obj.facesWithPressure, ...
                 'Pressure', weight);

            structuralBodyLoad(obj.model, ...
                'GravitationalAcceleration',[0;0;-9.8])
        
            obj.Rs = solve(obj.model);
        end

        function visualizeOutput(obj, weight, ms)
            pdeplot3D(obj.model, ...
                'ColorMapData', obj.Rs.VonMisesStress, ...
                'Deformation', obj.Rs.Displacement, ...
                'DeformationScaleFactor', 5);
            az = 180;
            el = 0;
            view(az, el);
            xlabel('Length (m)')
            ylabel('Length (m)')
            zlabel('Length (m)')
            xlim([-90 0])
            ylim([0 25])
            zlim([0 25])
            % Fix color bar limit
            lowerLimit = 1 * (1.0e+08)
            upperLimit = 5 * (1.0e+08)
            caxis([lowerLimit upperLimit]);

            % Add weight + max stress
            x = [0.3 0.9];
            y = [0.6 0.9];
            annotation('textbox', [0.1 0.9, 0.]

            %append('Weight: ', string(weight))
            %append('Max stress: ', string(ms))
            %str = {'Straight Line Plot','from 1 to 10'};
            %annotation('textbox',dim,'String',str,'FitBoxToText','on');

            
        end
        
    end
end

